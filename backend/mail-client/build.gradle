import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.network.*
import org.yaml.snakeyaml.Yaml

plugins {
    id 'java-library'
    id 'org.springframework.boot' version '2.4.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.bmuschko.docker-remote-api' version '6.6.1'
    id "com.avast.gradle.docker-compose" version '0.13.3'
    id 'com.github.node-gradle.node' version '2.2.4'
    id 'com.diffplug.gradle.spotless' version '4.5.1'
    id "jacoco"
    id "org.sonarqube" version "3.0"
}

group = 'com.smartict'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
compileJava.options.encoding = 'UTF-8'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'docker-compose'
apply plugin: 'org.sonarqube'

repositories {
    mavenCentral()
    gradlePluginPortal()
    maven {
        url "http://192.168.10.149:8081/repository/maven-public/"
        allowInsecureProtocol true
    }
    maven {
        url "http://192.168.10.149:8081/repository/smartict-group/"
        allowInsecureProtocol true
    }
}

dependencies {
    implementation 'junit:junit:4.13.1'

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    api 'org.springframework.boot:spring-boot-starter-web'
//    api group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.4.5'
    api group: 'org.springframework.security', name: 'spring-security-web', version: '5.4.6'
    api group: 'org.springframework.security', name: 'spring-security-config', version: '5.4.6'

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '2.5.4'

    // Use JUnit test framework
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.4.2')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.4.2')

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: '5.1.6.RELEASE'

    compile group: 'net.lingala.zip4j', name: 'zip4j', version: '1.3.2'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
}

// eclipse'te projeyi run etmek için lazım
mainClassName = 'com.smartict.mail.Application'
applicationDefaultJvmArgs = ["-Dspring.profiles.active=dev"]


/** ===========JAR OLUŞTURMA======================================================================================== */
bootJar() {
    doFirst {
        clean
    }
    enabled = true
    manifest {
        attributes 'Start-Class': 'com.smartict.mail.Application'
    }
}

jar {
    zip64 = true
    enabled = true
    manifest {
        attributes 'Main-Class': 'com.smartict.mail.Application'
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect() { it.isDirectory() ? it : zipTree(it) }
    } exclude("META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA")
}

/** ===========DOCKER IMAGE OLUŞTURMA=============================================================================== */
//Uyumsuzluk olmaması için docker-compose-prod dosyasında yazacağımız image ismini alıyor.
def dockerComposeYml = new Yaml().load(new File(new File("$projectDir").getParentFile().getParentFile().getAbsolutePath() + '/DevOps/docker/docker-compose.yml').newInputStream())
String appDockerImageName = dockerComposeYml["services"]["mail-client"]["image"]

//Bir önceki build sırasında oluşturulan docker image'ı silinir.
task dockerRemoveMailClientImage(type: DockerRemoveImage) {
    group = "mail client build"
    description = "Removes Mail Client Application docker image"
    targetImageId { appDockerImageName }
    println 'Remove mail client image custom '+ appDockerImageName
    onError {
        System.out.println("No previous image to delete")
    }
}

//Docker build işlemi yapılır(config dosyaları ve Dockerfile kopyalanır. Image oluşturulur.). Bu build öncesinde sırasıyla dockerRemoveMailClientImage->spotlessCheck->bootJar çalıştırıldıktan sonra build çalıştırılır.
task dockerBuildMailClientImage(type: DockerBuildImage, dependsOn: [dockerRemoveMailClientImage, spotlessCheck.mustRunAfter('dockerRemoveMailClientImage'), bootJar.mustRunAfter(spotlessCheck)]) {
    group = "mail client build"
    description = "Creates Mail Client Application docker image. It removes any previous images, creates a deployable Spring Boot jar file and bundles everything in a docker image"
    doFirst {
        println 'Starting copy for Dockerfile...'
        copy {
            from './Dockerfile'
            into 'build/libs'
        }
        println 'Starting copy for config files...'
        copy {
            from 'src/main/resources/application-prod.yml'
            into '../../DevOps/docker/exposed_config'
            rename('application-prod.yml', 'mail-client-config-base.yml')
        }
    }
    description = "Builds ${appDockerImageName} docker image."
    inputDir.set(file('build/libs'))
    images.add(appDockerImageName)
}

//Oluşturulan docker image'ı kaydedilir.
task dockerSaveMailClientImage(type: DockerSaveImage, dependsOn: dockerBuildMailClientImage) {
    group = "mail client build"
    description = "This task creates Mail Client Application docker image and exports it as a .tar file to be deployed remotely"
    destFile.set(file("../../DevOps/docker/${appDockerImageName}.tar"))
    image.set(appDockerImageName)
    // bu olmazsa Jenkins'te bu task '> Task :dockerSaveMailClientImage UP-TO-DATE' olarak görünüyor ve yeni imaj yerine önceki sunucuya kopyalanıyor
    outputs.upToDateWhen { false } // https://stackoverflow.com/a/18410574
}

dockerCompose {
    useComposeFiles = ['../../DevOps/docker/docker-compose.yml']
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}

/** ===========SPOTLESS============================================================================================= */
spotless {
    java {
        target '**/*.java'
        licenseHeader '/* SmartICT Bilisim A.S. (C) $YEAR */'
        eclipse().configFile '../smartict-java-code-style.xml'
        removeUnusedImports()
        importOrder('java', 'javax', 'com.smartict', 'com.ict', '')
    }
}

/** ===========SONARQUBE============================================================================================= */
sonarqube {
    properties {
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.login", "admin"
        property "sonar.password", "admin"
        property "sonar.projectName", "mail-client"
        property "sonar.projectKey", "com.smartict:mail-client"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.exclusions", "**/*Generated.java"
        property "sonar.java.binaries", "${project.buildDir}/classes"
        property "sonar.junit.reportPaths", "${project.buildDir}/test-results/test"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.dynamicAnalysis", "reuseReports"
    }
}
